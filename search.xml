<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数组和字符串</title>
      <link href="posts/null.html"/>
      <url>posts/null.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://pic.leetcode-cn.com/2b53523dc1a745d89fbc11ba776eaa2d0f220acf4c232b1a83f939c973141280-6.gif">数组 </a></p><p><img src="https://pic.leetcode-cn.com/2b53523dc1a745d89fbc11ba776eaa2d0f220acf4c232b1a83f939c973141280-6.gif" alt="wo"></p>]]></content>
      
      
      <categories>
          
          <category> leetcode-算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaAPI</title>
      <link href="posts/null.html"/>
      <url>posts/null.html</url>
      
        <content type="html"><![CDATA[<h2 id="JavaAPI"><a href="#JavaAPI" class="headerlink" title="JavaAPI"></a>JavaAPI</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 包装、装箱、拆箱 </tag>
            
            <tag> String </tag>
            
            <tag> 核心类库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java高级类特性</title>
      <link href="posts/null.html"/>
      <url>posts/null.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java高级类特性"><a href="#Java高级类特性" class="headerlink" title="Java高级类特性"></a>Java高级类特性</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抽象类 </tag>
            
            <tag> 接口 </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 枚举 </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面对对象编程</title>
      <link href="posts/null.html"/>
      <url>posts/null.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java面对对象编程"><a href="#Java面对对象编程" class="headerlink" title="Java面对对象编程"></a>Java面对对象编程</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类和对象 </tag>
            
            <tag> 封装 </tag>
            
            <tag> 继承 </tag>
            
            <tag> 多态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数组</title>
      <link href="posts/null.html"/>
      <url>posts/null.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java数组"><a href="#Java数组" class="headerlink" title="Java数组"></a>Java数组</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础语法</title>
      <link href="posts/null.html"/>
      <url>posts/null.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java基础语法"><a href="#Java基础语法" class="headerlink" title="Java基础语法"></a>Java基础语法</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分支结构 </tag>
            
            <tag> 循环结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程语言的概述</title>
      <link href="posts/null.html"/>
      <url>posts/null.html</url>
      
        <content type="html"><![CDATA[<h3 id="计算机语言介绍"><a href="#计算机语言介绍" class="headerlink" title="计算机语言介绍"></a>计算机语言介绍</h3><h4 id="一、机器语言"><a href="#一、机器语言" class="headerlink" title="一、机器语言"></a><strong>一、机器语言</strong></h4><p>​        简称机器码或原生码是用二进制代码表示能让CPU直接识别和执行的机器指令的集合，属于低级语言</p><p>​    用它来编写程序是非常繁琐的工作，表现如下几点：</p><ul><li><p>要熟记所用计算机的全部指令代码和代码的涵义</p></li><li><p>程序员自己要处理每条指令和每一数据的存储分配和输入输出，还要记住编程过程中每步所使用的工作单元处在何种状态</p></li><li><p>编写程序花费时间比运行时间远远大于几十倍甚至几百倍</p></li><li><p>程序中全部都是”0”和”1”指令代码，直观性差，容易出错，除了厂家专业人士外，绝大多数不再去学习它</p><p>图例：</p><p><img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213163913.png?raw=true"></p></li></ul><h4 id="二、汇编语言"><a href="#二、汇编语言" class="headerlink" title="二、汇编语言"></a><strong>二、汇编语言</strong></h4><ul><li><p>简称符号语言，用标识符代替机器指令的操作码，跟机器语言一样，直接对硬件操作，也属于低级语言， 一般来说只有像Inel AMD等芯片厂商应用才广泛</p></li><li><p>汇编语言的主体是汇编指令。汇编指令和机器指令的差别在于指令的表示方法上。汇编指令是机器指令便于记忆的书写格式</p></li></ul><p>​        图例：</p><p>​        操作：寄存器BX的内容送到AX中</p><p>​        1000100111011000           机器指令</p><p>​         mov    ax，bx                     汇编指令</p><p> 其特点：</p><ul><li><p> 面向机器的低级语言，通常为特定的计算机或系列计算机专门设计</p></li><li><p> 保持了机器语言的优点，具有直接和简捷的特点</p></li><li><p> 可有效地访问、控制计算机的各种硬件设备，如磁盘、存储器、CPU、I/O端口等</p></li><li><p> 目标代码简短，占用内存少，执行速度快，是高效的程序设计语言</p></li><li><p> 经常与高级语言配合使用，应用十分广泛</p></li></ul><h4 id="三、高级语言"><a href="#三、高级语言" class="headerlink" title="三、高级语言"></a><strong>三、高级语言</strong></h4><p>​        是大多数编程者的选择，由于汇编语言依赖于硬件体系，且标识符量大难记，于是人们又发明了更加易用的所谓高级语言，使一般人易于接受的文字来表示，从而让程序员写得更容易，可读性更高，以便于对电脑认知较浅的人亦可以大概明白其内容</p><p>  高级语言所编制的程序不能直接被计算机识别，必须经过转换才能被执行，按转换方式可分为2类：</p><h5 id="1、-编译类"><a href="#1、-编译类" class="headerlink" title="1、 编译类"></a>1、 编译类</h5><p>​         事先编好一个叫做编译程序的机器语言程序放在计算机中，当高级语言编的源程序输入计算机时，编译程序就把整个源程序自动翻译成用机器指令表示的目标程序</p><p>​         使用比较方便、效率较高，但源程序一旦需要修改，必须先修改再重新编译整个源程序才执行，跨平台性较差，如C、C++、Delphi等</p><p>​        图例：</p><p><img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213164208.png?raw=true"></p><h5 id="2、-解释类"><a href="#2、-解释类" class="headerlink" title="2、 解释类"></a>2、 解释类</h5><p>​         事先编好一个叫做解释程序的机器语言程序放在计算机中，当高级语言源程序输入计算机后，解释程序自动地逐句翻译源程序，译一句执行一句。</p><p>​        使用效率比较低，依赖解释器，跨平台性好，如Python，Java，Ruby等</p><p>​        编译的结果是另外一种语言，而解释的就是一种中间语言</p><p>​        图例：</p><p><img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213164239.png?raw=true"></p><h4 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a><strong>四、总结</strong></h4><h5 id="1、机器语言"><a href="#1、机器语言" class="headerlink" title="1、机器语言"></a>1、机器语言</h5><p>​     优点是最底层，速度最快，缺点是最复杂，开发效率最低</p><h5 id="2、汇编语言"><a href="#2、汇编语言" class="headerlink" title="2、汇编语言"></a>2、汇编语言</h5><p>​     优点是比较底层，速度最快，缺点是复杂，开发效率最低</p><h5 id="3、高级语言"><a href="#3、高级语言" class="headerlink" title="3、高级语言"></a>3、高级语言</h5><p>​      编译型语言执行速度快，不依赖语言环境运行，跨平台差</p><p>​      解释型跨平台好，一分代码，到处可用，开发效率高，缺点是执行速度慢，依赖解释器运行</p><h3 id="Java语言的前世今生"><a href="#Java语言的前世今生" class="headerlink" title="Java语言的前世今生"></a>Java语言的前世今生</h3><h4 id="一、Java语言概述"><a href="#一、Java语言概述" class="headerlink" title="一、Java语言概述"></a>一、Java语言概述</h4><ul><li>是SUN(Stanford University Network，斯坦福大学网络公司 ) 1995年推出的一门高级编程语言</li><li> 是一种面向Internet的编程语言。Java一开始富有吸引力是因为Java程序可以在Web浏览器中运行。这些Java程序被称为Java小程序（applet）。applet使用现代的图形用户界面与Web用户进行交互。 applet内嵌在HTML代码中</li><li> 随着Java技术在web方面的不断成熟，已经成为Web应用程序的首选开发语言</li><li>后台开发语言：Java、PHP、Python、Go、Node.js</li></ul><h4 id="二、Java简史"><a href="#二、Java简史" class="headerlink" title="二、Java简史"></a>二、Java简史</h4><p>图例：</p><p><img src="https://img-blog.csdnimg.cn/20191117210522275.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIzNDUyMzg1,size_16,color_FFFFFF,t_70" alt="java简史"></p><h3 id="Java技术体系平台"><a href="#Java技术体系平台" class="headerlink" title="Java技术体系平台"></a>Java技术体系平台</h3><h5 id="一、Java-SE-Java-Standard-Edition-标准版"><a href="#一、Java-SE-Java-Standard-Edition-标准版" class="headerlink" title="一、Java SE(Java Standard Edition)标准版"></a>一、Java SE(Java Standard Edition)标准版</h5><p>支持面向桌面级应用（如Windows下的应用程序）的Java平台，提供了完整的Java核 心API，此版本以前称为J2SE</p><h5 id="二、Java-EE-Java-Enterprise-Edition-企业版"><a href="#二、Java-EE-Java-Enterprise-Edition-企业版" class="headerlink" title="二、Java EE(Java Enterprise Edition)企业版"></a>二、Java EE(Java Enterprise Edition)企业版</h5><p>是为开发企业环境下的应用程序提供的一套解决方案。该技术体系中包含的技术如<br>:Servlet 、Jsp等，主要针对于Web应用程序开发。版本以前称为J2EE</p><h5 id="三、Java-ME-Java-Micro-Edition-小型版"><a href="#三、Java-ME-Java-Micro-Edition-小型版" class="headerlink" title="三、Java ME(Java Micro Edition)小型版"></a>三、Java ME(Java Micro Edition)小型版</h5><p>支持Java程序运行在移动终端（手机、PDA）上的平台，对Java API有所精简，并加入了针对移动终端的支持，此版本以前称为J2ME</p><h5 id="四、Java-Card"><a href="#四、Java-Card" class="headerlink" title="四、Java Card"></a>四、Java Card</h5><p>支持一些Java小程序（Applets）运行在小内存设备（如智能卡）上的平台</p><h3 id="JDK的安装与环境配置"><a href="#JDK的安装与环境配置" class="headerlink" title="JDK的安装与环境配置"></a>JDK的安装与环境配置</h3><h4 id="一、JDK下载及安装"><a href="#一、JDK下载及安装" class="headerlink" title="一、JDK下载及安装"></a>一、JDK下载及安装</h4><p><img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213143209.png?raw=true"></p><h4 id="二、JDK环境变量配置及测试"><a href="#二、JDK环境变量配置及测试" class="headerlink" title="二、JDK环境变量配置及测试"></a>二、JDK环境变量配置及测试</h4><p><img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213163534.png?raw=true"></p><h3 id="JDK、JRE、JVM之间的关系"><a href="#JDK、JRE、JVM之间的关系" class="headerlink" title="JDK、JRE、JVM之间的关系"></a>JDK、JRE、JVM之间的关系</h3><p>• javac.exe - 编译器，主要用于将高级Java源代码翻译成字节码文件 </p><p>• java.exe - 解释器，主要用于启动JVM对字节码文件进行解释并执行</p><p><img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213143935.png?raw=true"></p><h3 id="Java核心机制及JVM运行原理"><a href="#Java核心机制及JVM运行原理" class="headerlink" title="Java核心机制及JVM运行原理"></a>Java核心机制及JVM运行原理</h3><h4 id="一、Java两种核心机制"><a href="#一、Java两种核心机制" class="headerlink" title="一、Java两种核心机制"></a>一、Java两种核心机制</h4><ul><li><h5 id="Java虚拟机-Java-Virtal-Machine"><a href="#Java虚拟机-Java-Virtal-Machine" class="headerlink" title="Java虚拟机 (Java Virtal Machine)"></a>Java虚拟机 (Java Virtal Machine)</h5></li></ul><p><img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213160847.png?raw=true"></p><ul><li><h5 id="垃圾收集机制-Garbage-Collection"><a href="#垃圾收集机制-Garbage-Collection" class="headerlink" title="垃圾收集机制 (Garbage Collection)"></a>垃圾收集机制 (Garbage Collection)</h5><p>不再使用的内存空间应回收—— 垃圾回收</p><p>在C/C++等语言中，由程序员负责回收无用内存。Java 语言消除了程序员回收无用内存空间的责任：它提供一种系统级线程跟踪存储空间的分配情况。并在JVM空闲时，检查并释放那些可被释放的存储空间</p><p>垃圾回收在Java程序运行过程中自动进行，程序员无法精确控制和干预</p></li></ul><h3 id="Java程序执行原理"><a href="#Java程序执行原理" class="headerlink" title="Java程序执行原理"></a>Java程序执行原理</h3><p><img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213163759.png?raw=true"></p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>​    用于注解说明解释程序的文字就是注释</p><p>​    Java中的注释类型：</p><p>​     单行注释</p><p>​    多行注释</p><p>​    文档注释 (java特有) </p><p>​    提高了代码的阅读性；调试程序的重要方法。 </p><p>​    注释是一个程序员必须要具有的良好编程习惯。</p><p>​    将自己的思想通过注释先整理出来，再用代码去体现</p><p>​    <strong>单行注释</strong></p><p>​    格式：</p><p>​     //注释文字</p><p>​    <strong>多行注释</strong></p><p>​    格式： </p><p>​    /* 注释文字 */ </p><p>​    注：</p><p>​    对于单行和多行注释，被注释的文字，不会被JVM（java虚拟机）解释执行。</p><p>​    多行注释里面不允许有多行注释嵌套</p><p>​    <strong>文档注释（Java特有）</strong></p><p>​    格式：</p><p><strong>**</strong>/</p><p><strong>@author</strong> <strong>指定</strong>java程序的作者</p><p><strong>@version</strong> <strong>指定源文件的版本</strong></p><p>*<strong>/</strong> </p><p>​    注释内容可以被JDK提供的工具 javadoc 所解析，生成一套以网页文件形</p><p>​    式体现的该程序的说明文</p><p>​    操作方式</p><p><img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213143211.jpg?raw=true" alt="文档注释"></p><p><img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213143212.jpg?raw=true" alt="文档注释"></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> *HelloChina</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@author</span> YoYopupunsi</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> *11:19 2021/1/30 0030</span></span><br><span class="line"><span class="comment"> *备注：验证各类注释的注意事项</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloChina</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;你好，中国！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//验证：单行和多行注释，被注释的文字，不会被JVM（java虚拟机）解释执行</span></span><br><span class="line"><span class="comment">//验证：多行注释不允许嵌套使用</span></span><br><span class="line"><span class="comment">//单行注释不会被JVM解释执行</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释不会被JVM解释执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*验证：多行注释不允许嵌套使用</span></span><br><span class="line"><span class="comment">你好中国</span></span><br><span class="line"><span class="comment">HelloChina</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//java: 需要class, interface或enum,多行注释不允许嵌套使用</span></span><br></pre></td></tr></table></figure></div><h3 id="开发第一个Java应用程序HelloWorld"><a href="#开发第一个Java应用程序HelloWorld" class="headerlink" title="开发第一个Java应用程序HelloWorld"></a>开发第一个Java应用程序HelloWorld</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">one_code</span>/*类名*/ </span>&#123;<span class="comment">/*类体*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main<span class="comment">/*主方法名程序的入口*/</span>(String[]args)&#123;<span class="comment">/*主方法体*/</span></span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);<span class="comment">//自动换行</span></span><br><span class="line">        System.out.print(<span class="string">&quot;我爱中国&quot;</span>);<span class="comment">//不换行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;HelloChina&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*对第一个程序HelloWorld总结：</span></span><br><span class="line"><span class="comment">1.java程序编写-&gt;编译-&gt;运行的过程</span></span><br><span class="line"><span class="comment">(1)编写：编写java代码保存.java结尾的源文件</span></span><br><span class="line"><span class="comment">(2)编译：使用javac.exe命令编译java源文件生成.class的字节码文件,格式：javac 源文件名.java</span></span><br><span class="line"><span class="comment">javac one_code.java，后缀.java为了检验源文件是否编写错误</span></span><br><span class="line"><span class="comment">(3)运行：使用java.exe命令解释运行.class的字节码文件，格式：java 类</span></span><br><span class="line"><span class="comment">java one_code jvm解释运行字节码文件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.class 类名&#123;类体&#125;  main()主方法名，程序的入口&#123;主方法体&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3. 输出语句：</span></span><br><span class="line"><span class="comment">System.out.println():先输出数据，然后换行</span></span><br><span class="line"><span class="comment">System.out.print():只输出数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4.每一行执行语句都以&quot;;&quot;结束</span></span><br><span class="line"><span class="comment">在java语言规范中，分号代表一个语句的结束。</span></span><br><span class="line"><span class="comment">所以，即使分号前面没有任何内容，那么一个分号其实也代表一个语句（空语句）。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">5.编译的过程：编译以后，会生成一个或多个字节码文件。</span></span><br><span class="line"><span class="comment">字节码文件的文件名与java源文件中的类名相同</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">6.关于作用域的理解</span></span><br><span class="line"><span class="comment">(1)个人理解：‘&#123;&#125;’花括号‘&#123;’是作用域的起点，&#x27;&#125;&#x27;是作用域的终点.</span></span><br><span class="line"><span class="comment">(2)百度：中间部分就是一个代码块，代码块决定其中定义的变量的作用域，</span></span><br><span class="line"><span class="comment">代码块由若干语句组成，必须用大括号括起来，形成一个复合语句，</span></span><br><span class="line"><span class="comment">多个复合语句可以嵌套在另外的一对大括号中形成更复杂的复合语句.</span></span><br><span class="line"><span class="comment">说得简单点就是在哪个大括号中声明的变量其作用域就是该大括号范围内.</span></span><br><span class="line"><span class="comment">代码块决定了变量的作用域，作用域决定了变量的“可见性”以及“存在时间”.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 7.验证java源文件是否可以声明多个class？</span></span><br><span class="line"><span class="comment">// 在一个java源文件中可以声明多个class。但是，只能最多有一个类声明为public的。</span></span><br><span class="line"><span class="comment">// 而且要求声明为public的类的类名必须与源文件名相同。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*public class he&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">编译错误：类he是公共的，应在名为he.java的文件中声明</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">woman</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">man</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="Java-Code-Style"><a href="#Java-Code-Style" class="headerlink" title="Java Code Style"></a>Java Code Style</h3><p>代码整洁之道(已整理，关于标识符)</p><p>第2章 有意义的命名<br>2.1 介绍<br>软件中随处可见命名。我们给变量、函数、参数、类和包命名。我们给源代码及源代码所在目录命名<br>这么多命名要做，不妨做好它。下文列出了取个好名字的几条简单规则</p><p>2.2 名副其实,见名知意<br>     变量名太随意，haha、list1、ok、theList 这些都没啥意义</p><p>2.3 避免误导<br>     包含List、import、java等类名、关键字或特殊字；<br>     字母o与数字0，字母l与数字1等<br>     提防使用不同之处较小的名称。比如：XYZControllerForEfficientHandlingOfStrings与XYZControllerForEfficientStorageOfStrings</p><p>2.4 做有意义的区分<br>     反面教材，变量名：a1、a2、a3<br>     避免冗余，不要出现Variable、表字段中避免出现table、字符串避免出现nameString，直接name就行，知道是字符串类型<br>     再比如：定义了两个类：Customer类和CustomerObject类，如何区分？<br>         定义了三个方法：getActiveAccount()、getActiveAccounts()、getActiveAccountInfo()，如何区分？</p><p>2.5 使用读得出来的名称<br>     不要使用自己拼凑出来的单词，比如：xsxm(学生姓名)；genymdhms(生成日期，年、月、日、时、分、秒)<br>     所谓的驼峰命名法，尽量使用完整的单词</p><p>2.6 使用可搜索的名称<br>     一些常量，最好不直接使用数字，而指定一个变量名，这个变量名可以便于搜索到.<br>     比如：找MAX_CLASSES_PER_STUDENT很容易，但想找数字7就麻烦了。</p><p>2.7 避免使用编码<br>     2.7.1 匈牙利语标记法<br>           即变量名表明该变量数据类型的小写字母开始。例如，szCmdLine的前缀sz表示“以零结束的字符串”<br>     2.7.2 成员前缀<br>          避免使用前缀，但是Android中一个比较好的喜欢用m表示私有等，个人感觉比较好<br>     2.7.3 接口和实现<br>          作者不喜欢把接口使用I来开头，实现也希望只是在后面添加Imp</p><p>2.8 避免思维映射<br>     比如传统上惯用单字母名称做循环计数器。所以就不要给一些非计数器的变量命名为：i、j、k等</p><p>2.9  类名<br>     类名与对象名应该是名词与名词短语。如Customer、WikiPage、Account和AddressParser。避免使用Data或Info这样的类名。<br>     不能使动词。比如：Manage、Process</p><p>2.10 方法名<br>     方法名应当是动词或者动词短语。如postPayment、deletePage或save</p><p>2.11 别扮可爱<br>     有的变量名叫haha、banana<br>     别用eatMyShorts()表示abort()</p><p>2.12 每个概念对应一个词<br>     项目中同时出现controllers与managers，为什么不统一使用其中一种？<br>     对于那些会用到你代码的程序员，一以贯之的命名法简直就是天降福音。</p><p>2.13 别用双关语<br>     有时可能使用add并不合适，比例insert、append。add表示完整的新添加的含义。     </p><p>2.14 使用解决方案领域名称<br>     看代码的都是程序员，所以尽量用那些计算机科学术语、算法名、模式名、数学术语，<br>     依据问题所涉领域来命名不算是聪明的做法</p><p>2.15 使用源自所涉问题领域的名称<br>     如果不能用程序员熟悉的术语来给手头的工作命名，就采用从所涉问题领域而来的名称吧。<br>     至少，负责维护代码的程序员就能去请教领域专家了</p><p>2.16 添加有意义的语境<br>     可以把相关的变量放到一个类中，使用这个类来表明语境</p><p>2.17 不要添加没用的语境<br>     名字中带有项目的缩写，这样完全没有必要。比如有一个名为“加油站豪华版”（Gas Station Deluxe）的项目，<br>     在其中给每个类添加GSD前缀就不是什么好策略</p><p>2.18 最后的话<br>     取好名字最难的地方在于需要良好的描述技巧和共有文化背景</p><h3 id="变量的声明和使用"><a href="#变量的声明和使用" class="headerlink" title="变量的声明和使用"></a>变量的声明和使用</h3><h4 id="一、标识符"><a href="#一、标识符" class="headerlink" title="一、标识符"></a>一、标识符</h4><h5 id="1、标识符"><a href="#1、标识符" class="headerlink" title="1、标识符"></a>1、标识符</h5><ul><li>Java 对各种<strong>变量</strong>、<strong>方法</strong>和<strong>类</strong>等要素命名时使用的字符序列称为标识符</li><li><strong>技巧：凡是自己可以起名字的地方都叫标识符</strong>。 </li></ul><h5 id="2、定义合法标识符规则"><a href="#2、定义合法标识符规则" class="headerlink" title="2、定义合法标识符规则"></a>2、定义合法标识符规则</h5><ul><li><p><strong>由26个英文字母大小写，0-9 _或 $组成</strong></p></li><li><p><strong>数字不可以开头</strong></p></li><li><p><strong>不可以使用关键字和保留字，但能包含关键字和保留字</strong></p></li><li><p><strong>Java中严格区分大小写，长度无限制</strong></p></li><li><p><strong>标识符不能包含空格</strong></p></li></ul><h5 id="3、Java中的名称命名规范："><a href="#3、Java中的名称命名规范：" class="headerlink" title="3、Java中的名称命名规范："></a>3、Java中的名称命名规范：</h5><ul><li><p><strong>包名</strong>：多单词组成时所有字母都小写：aaabbbccc</p></li><li><p><strong>类名、接口名</strong>：多单词组成时，所有单词的首字母大写：AaaBbbCcc</p></li><li><p><strong>变量名、方法名</strong>：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：aaaBbbCcc</p></li><li><p><strong>常量名</strong>：所有字母都大写。多单词时每个单词用下划线连接：AAA_BBB_CCC</p></li><li><p>注意1：在起名字时，为了提高阅读性，要尽量有意义，“见名知意”。</p></li><li><p>注意2：java采用unicode字符集，因此标识符也可以使用汉字声明，但是不建议使用。</p></li></ul><h4 id="二、变量的概念"><a href="#二、变量的概念" class="headerlink" title="二、变量的概念"></a>二、变量的概念</h4><ul><li>内存中的一个存储区域</li><li>该区域的数据可以在同一类型范围内不断变化</li><li>变量是程序中最基本的存储单元。包含变量类型、变量名和存储的值</li></ul><h4 id="三、变量的作用"><a href="#三、变量的作用" class="headerlink" title="三、变量的作用"></a>三、变量的作用</h4><ul><li>用于在内存中保存数据</li></ul><h4 id="四、变量注意事项"><a href="#四、变量注意事项" class="headerlink" title="四、变量注意事项"></a>四、变量注意事项</h4><ul><li>Java中每个变量必须先声明，后使用</li><li>使用变量名来访问这块区域的数据</li><li>变量的作用域：其定义所在的一对{ }内 </li><li>变量只有在其作用域内才有效</li><li>同一个作用域内，不能定义重名的变量</li></ul><h4 id="五、声明变量"><a href="#五、声明变量" class="headerlink" title="五、声明变量"></a>五、声明变量</h4><ul><li>语法：数据类型    变量名称</li><li>例如：int var;</li></ul><h4 id="六、变量的赋值"><a href="#六、变量的赋值" class="headerlink" title="六、变量的赋值"></a>六、变量的赋值</h4><ul><li>语法：变量名称 = 值</li><li>例如：var = 10;</li></ul><h4 id="七、声明和赋值变量"><a href="#七、声明和赋值变量" class="headerlink" title="七、声明和赋值变量"></a>七、声明和赋值变量</h4><ul><li><p>语法： 数据类型    变量名 = 初始化值</p></li><li><p>例如：int var = 10;</p></li><li><p>对于每一种数据都定义了明确的具体数据类型（强类型语言），在内存中分</p><p>配了不同大小的内存空间</p></li></ul><h4 id="八、变量的分类-按声明的位置的不同"><a href="#八、变量的分类-按声明的位置的不同" class="headerlink" title="八、变量的分类-按声明的位置的不同"></a>八、变量的分类-按声明的位置的不同</h4><ul><li><p><strong>在方法体外，类体内声明的变量称为成员变量</strong> </p></li><li><p><strong>在方法体内部声明的变量称为局部变量</strong></p></li><li><p><strong>注意：二者在初始化值方面的异同:</strong></p></li></ul><p>​       <strong>同：都有生命周期</strong>     <strong>异：局部变量除形参外，需显式初始化</strong></p><p><img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213143213.png?raw=true" alt="变量的分类"></p><h5 id="变量-代码："><a href="#变量-代码：" class="headerlink" title="变量-代码："></a>变量-代码：</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: YoYopupunsi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: Created in 11:00 2021/2/1 0001</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">变量的使用</span></span><br><span class="line"><span class="comment">1. java定义变量的格式：</span></span><br><span class="line"><span class="comment">数据类型 变量名 = 变量值;</span></span><br><span class="line"><span class="comment">数据类型 变量名;</span></span><br><span class="line"><span class="comment">变量名 = 变量值;</span></span><br><span class="line"><span class="comment">2. 说明：</span></span><br><span class="line"><span class="comment">   ① 变量必须先声明，后使用</span></span><br><span class="line"><span class="comment">   ② 变量都定义在其作用域内。在作用域内，它是有效的。换句话说，出了作用域，就失效了</span></span><br><span class="line"><span class="comment">   ③ 同一个作用域内，不可以声明两个同名的变量</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">variable_code</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.变量的定义(输入)</span></span><br><span class="line">        <span class="keyword">int</span> Var = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//2.变量的使用（输出）</span></span><br><span class="line">        System.out.println(Var);</span><br><span class="line">        <span class="comment">//编译错误：使用Var之前并未定义过Var</span></span><br><span class="line">        <span class="comment">//System.out.println(Var);</span></span><br><span class="line">        <span class="comment">//3.变量的声明</span></span><br><span class="line">        <span class="comment">//int Var;</span></span><br><span class="line">        <span class="comment">//编译错误：使用Var之前并未赋值过Var</span></span><br><span class="line">        <span class="comment">//System.out.println(Var);</span></span><br><span class="line">        <span class="comment">//4.变量的赋值</span></span><br><span class="line">        <span class="comment">//Var = 1001;</span></span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line">        <span class="comment">//System.out.println(Var);</span></span><br><span class="line">        <span class="comment">//5.不可以在同一个作用域内定义同名的变量</span></span><br><span class="line">        <span class="comment">//int Var = 22;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="案例题目："><a href="#案例题目：" class="headerlink" title="案例题目："></a><strong>案例题目：</strong></h5><p>• 提示用户从键盘输入自己的姓名和年龄信息并打印出来</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: YoYopupunsi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: Created in 12:16 2021/2/1 0001</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 变量案例：提示用户从键盘输入自己的姓名和年龄信息并打印出来</span></span><br><span class="line"><span class="comment">*分析：</span></span><br><span class="line"><span class="comment">*1.声明两个变量用于记录姓名和年龄信息</span></span><br><span class="line"><span class="comment">*2.提示用户从键盘输入姓名和年龄信息并放入到变量中   变量随使用随声明</span></span><br><span class="line"><span class="comment">*3.打印变量的数值     尽可能减少重复的代码</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VariableCase_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.声明两个变量用于记录姓名和年龄信息</span></span><br><span class="line">        <span class="comment">//String name;</span></span><br><span class="line">        <span class="comment">//int age;</span></span><br><span class="line">        <span class="comment">// 2.提示用户从键盘输入姓名和年龄信息并放入到变量中</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入您的姓名：&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建一个扫描器来扫描键盘输入的内容  System.in代表键盘输入</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">// 通过扫描器读取一个字符串数据放入变量name中</span></span><br><span class="line">        String name = sc.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入您的年龄：&quot;</span>);</span><br><span class="line">        Scanner sc1 = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">// 通过扫描器读取一个整数数据放入变量age中</span></span><br><span class="line">        <span class="keyword">int</span> age = sc1.nextInt();</span><br><span class="line">        <span class="comment">// 3.打印变量的数值</span></span><br><span class="line">        System.out.println(<span class="string">&quot; 姓名： &quot;</span> + name + <span class="string">&quot;\n 年龄： &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="数据类型的分类"><a href="#数据类型的分类" class="headerlink" title="数据类型的分类"></a>数据类型的分类</h3><p><img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213143214.png?raw=true"></p><h4 id="一、进制"><a href="#一、进制" class="headerlink" title="一、进制"></a>一、进制</h4><p><img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213143215.png?raw=true"></p><ul><li>正十进制转换为二进制的方式：</li></ul><p><img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213143216.jpg?raw=true"></p><ul><li>正二进制转换为十进制的方式：</li></ul><p><img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213143217.jpg?raw=true"></p><ul><li>负十进制转换为二进制的方式：</li></ul><p><img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213143218.jpg?raw=true"></p><ul><li>负二进制转换为十进制的方式：</li></ul><p><img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213143219.jpg?raw=true"></p><ul><li><strong>单个字节表示的范围：</strong></li></ul><p><img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213143220.jpg?raw=true"></p><h4 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h4><p><img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213143221.png?raw=true"></p><ul><li>转义字符<img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213143906.png?raw=true"></li><li>ASCII表<img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213143907.png?raw=true"></li><li>相关代码<img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213143908.png?raw=true"></li></ul><h4 id="三、基本数据类型之间的转换"><a href="#三、基本数据类型之间的转换" class="headerlink" title="三、基本数据类型之间的转换"></a>三、基本数据类型之间的转换</h4><ul><li><p>自动数据类型转换：表示将变量b的数值赋值给变量s，并覆盖变量s中原来的数值，相当于从byte类型到short类型的转换，小到大自动转换</p><p>![自动数据类型转换](D:\project\project_java\01_Java_模块一_一阶段\02_任务二： 变量和数据类型\04_picture\05_image-20210204102841415.png)</p></li><li><p>强制数据类型转换：表示将变量i的数值赋值给变量s，并覆盖变量s中原来的数值，相当于从int类型到short类型的转换，大到小强制转换（精度会有损失）</p></li><li><p>相关代码</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: YoYopupunsi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: Created in 10:56 2021/2/2 0002</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataTypeConversion</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.首先声明变量接收各个数据类型</span></span><br><span class="line">        <span class="keyword">byte</span> b = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">short</span> s = <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">127</span>;</span><br><span class="line">        <span class="keyword">long</span> l = <span class="number">1234567891011L</span>;</span><br><span class="line">        <span class="keyword">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">boolean</span> bo1 = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> bo2 = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">float</span> f = <span class="number">3.14159f</span>;</span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">3.141592653545</span>;</span><br><span class="line">        <span class="comment">//2.先打印各个数据类型的值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;b的值为：&quot;</span> + b);<span class="comment">//127</span></span><br><span class="line">        System.out.println(<span class="string">&quot;s的值为：&quot;</span> + s);<span class="comment">//32767</span></span><br><span class="line">        System.out.println(<span class="string">&quot;i的值为：&quot;</span> + i);<span class="comment">//388883</span></span><br><span class="line">        System.out.println(<span class="string">&quot;l的值为：&quot;</span> + l);<span class="comment">//1234567891011L</span></span><br><span class="line">        System.out.println(<span class="string">&quot;c的值为：&quot;</span> + c);<span class="comment">//a</span></span><br><span class="line">        System.out.println(<span class="string">&quot;bo1的值为：&quot;</span> + bo1);<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;bo2的值为：&quot;</span> + bo2);<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;f的值为：&quot;</span> + f);<span class="comment">//3.14159</span></span><br><span class="line">        System.out.println(<span class="string">&quot;d的值为：&quot;</span> + d);<span class="comment">//3.141592653545</span></span><br><span class="line">        <span class="comment">//3.首先测试自动数据类型转换：表示将变量b的数值赋值给变量s，并覆盖变量s中原来的数值，相当于从byte类型到short类型的转换，小到大自动转换</span></span><br><span class="line">        s = b;<span class="comment">//</span></span><br><span class="line">        System.out.println(<span class="string">&quot;b的值为：&quot;</span> + b);<span class="comment">//1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;s的值为：&quot;</span> + s);<span class="comment">//1</span></span><br><span class="line">        i =s;</span><br><span class="line">        System.out.println(<span class="string">&quot;i的值为：&quot;</span> + i);<span class="comment">//1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;s的值为：&quot;</span> + s);<span class="comment">//1</span></span><br><span class="line">        <span class="comment">//4.测试强制数据类型转换：表示将变量i的数值赋值给变量s，并覆盖变量s中原来的数值，相当于从int类型到short类型的转换，大到小强制转换</span></span><br><span class="line">        <span class="comment">//s = i;//java: 不兼容的类型: 从int转换到short可能会有损失</span></span><br><span class="line">        <span class="comment">//正确格式：</span></span><br><span class="line">        i = <span class="number">127</span>;</span><br><span class="line">        s = (<span class="keyword">short</span>) i;</span><br><span class="line">        System.out.println(<span class="string">&quot;i的值为：&quot;</span> + i);</span><br><span class="line">        System.out.println(<span class="string">&quot;s的值为：&quot;</span> + s);</span><br><span class="line">        System.out.println(<span class="string">&quot;s的值为：&quot;</span> + (<span class="keyword">int</span>) s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3></li></ul><h4 id="一-算术运算符"><a href="#一-算术运算符" class="headerlink" title="一.算术运算符"></a>一.算术运算符</h4><p>• + 表示加法运算符</p><p>• - 表示减法运算符</p><p>• * 表示乘法运算符</p><p>• / 表示除法运算符</p><p>• % 表示取模/取余运算符</p><h4 id="二-字符串连接运算符"><a href="#二-字符串连接运算符" class="headerlink" title="二.字符串连接运算符"></a>二.字符串连接运算符</h4><p>• + 可以实现字符串的连接。同时可以实现字符串与其他数据类型“相连”。</p><h5 id="算术运算符几个问题的验证-如下列代码："><a href="#算术运算符几个问题的验证-如下列代码：" class="headerlink" title="算术运算符几个问题的验证(如下列代码：)"></a><strong>算术运算符几个问题的验证(如下列代码：)</strong></h5><p><u><strong>1.若希望保留小数部分该如何处理？</strong></u></p><p>处理方式一：使用强制类型转换将其中一个操作数转换为double类型再运算即可</p><p>处理方式二：使用 变量*1.0 打印即可</p><p><strong><u>2.算术运算符中%能对负数取模吗？取模一定为正数吗？验证：</u></strong></p><p>结论：负数参与的取模运算规则：先忽略负号，按照正数运算之后，被取模的数是正数结果就取正，反之取负。（注：(-2)%5中被取模数是-2,(-5)%2中被取模数是-1）</p><p><strong><u>3.对于除号“/”，它的整数除和小数除的区别是什么？验证：</u></strong></p><p>结论：整数之间做除法时，只保留整数部分而舍弃小数部分，整数与小数相除的结果为小数，小数除的结果为小数</p><p>*<em><u>4.=  +=   -=   <em>=  /=  %=   里面隐藏了强制类型转换</u></em></em></p><p>byte x += 10;     —&gt; x = (byte)(x + 10);</p><h5 id="案例题目-提示用户输入正整数类型的秒数，拆分秒数后输出x小时x分x秒。-如：输入xxxx，输出x小时x分x秒。"><a href="#案例题目-提示用户输入正整数类型的秒数，拆分秒数后输出x小时x分x秒。-如：输入xxxx，输出x小时x分x秒。" class="headerlink" title="**案例题目:**提示用户输入正整数类型的秒数，拆分秒数后输出x小时x分x秒。 如：输入xxxx，输出x小时x分x秒。"></a>**案例题目:**提示用户输入正整数类型的秒数，拆分秒数后输出x小时x分x秒。 如：输入xxxx，输出x小时x分x秒。</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticOperatorsAndCases</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//算术运算学习：</span></span><br><span class="line">        <span class="comment">//1.声明两个int变量并初始化</span></span><br><span class="line">        <span class="comment">//int Ari1</span></span><br><span class="line">        <span class="comment">//int Ari2</span></span><br><span class="line">        <span class="keyword">int</span> Ari1 = <span class="number">20</span>, Ari2 = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//分别为+ - * / %</span></span><br><span class="line">        <span class="keyword">int</span> Add = Ari1 + Ari2;<span class="comment">//声明一个变量Add记录Ari1，Ari2的和</span></span><br><span class="line">        <span class="keyword">int</span> Sub = Ari1 - Ari2;<span class="comment">//声明一个变量Sub记录Ari1，Ari2的差</span></span><br><span class="line">        <span class="keyword">int</span> Mul = Ari1 * Ari2;<span class="comment">//声明一个变量Mul记录Ari1，Ari2的乘积</span></span><br><span class="line">        <span class="keyword">int</span> Div = Ari1 / Ari2;<span class="comment">//声明一个变量Div记录Ari1，Ari2的除法</span></span><br><span class="line">        <span class="keyword">int</span> Sur = Ari1 % Ari2;<span class="comment">//声明一个变量Sur记录Ari1，Ari2的取余</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Ari1，Ari2的和为：&quot;</span> + Add + <span class="string">&quot;\nAri1，Ari2的差为：&quot;</span> + Sub + <span class="string">&quot;\nAri1，Ari2的乘积为：&quot;</span> + Mul + <span class="string">&quot;\nAri1，Ari2的除法为：&quot;</span> + Div + <span class="string">&quot;\nAri1，Ari2的取余为：&quot;</span> + Sur);</span><br><span class="line">        <span class="comment">//Ari1，Ari2的和为：30  Ari1，Ari2的差为：10  Ari1，Ari2的乘积为：200  Ari1，Ari2的除法为：2  Ari1，Ari2的取余为：0</span></span><br><span class="line">        <span class="comment">//若希望保留小数部分该如何处理？</span></span><br><span class="line">        <span class="comment">//处理方式一：使用强制类型转换将其中一个操作数转换为double类型再运算即可</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Ari1，Ari2的和为：&quot;</span> + (<span class="keyword">double</span>)Add);</span><br><span class="line">        <span class="comment">//处理方式二：使用 变量*1.0 打印即可</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Ari1，Ari2的和为：&quot;</span> + Add*<span class="number">1.0</span>);</span><br><span class="line">        <span class="comment">//算术运算符中%能对负数取模吗？取模一定为正数吗？验证：</span></span><br><span class="line">        <span class="comment">//1.首先声明并赋值两个整数型的变量记录</span></span><br><span class="line">        <span class="keyword">int</span> Sur1 = <span class="number">5</span>,Sur2 = -<span class="number">2</span>;</span><br><span class="line">        <span class="comment">//2.声明一个变量Sur3记录Sur1，Sur2的取模</span></span><br><span class="line">        <span class="keyword">int</span> Sur3 = Sur1 % Sur2;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sur1，Sur2的取模为:&quot;</span> + Sur3);<span class="comment">//Sur1，Sur2的取模为:1</span></span><br><span class="line">        <span class="comment">//3.声明一个变量Sur4记录Sur1，Sur2的取模</span></span><br><span class="line">        <span class="keyword">int</span> Sur4 = Sur2 % Sur1;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sur1，Sur2的取模为:&quot;</span> + Sur4);<span class="comment">//Sur1，Sur2的取模为:-2</span></span><br><span class="line">        <span class="comment">//4.声明并赋值两个整数型的变量记录</span></span><br><span class="line">        <span class="keyword">int</span> Sur5 = -<span class="number">5</span>,Sur6 = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//5.声明一个变量Sur8记录Sur5，Sur6的取模</span></span><br><span class="line">        <span class="keyword">int</span> Sur7 = Sur5 % Sur6;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sur5，Sur6的取模为:&quot;</span> + Sur7);<span class="comment">//Sur5，Sur6的取模为:-1</span></span><br><span class="line">        <span class="comment">//6.声明一个变量Sur8记录Sur5，Sur6的取模</span></span><br><span class="line">        <span class="keyword">int</span> Sur8 = Sur6 % Sur5;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sur5，Sur6的取模为:&quot;</span> + Sur8);<span class="comment">//Sur5，Sur6的取模为:2</span></span><br><span class="line">        <span class="comment">//结论：负数参与的取模运算规则：先忽略负号，按照正数运算之后，被取模的数是正数结果就取正，反之取负。（注：(-2)%5中被取模数是-2,(-5)%2中被取模数是-1）</span></span><br><span class="line">        <span class="comment">//对于除号“/”，它的整数除和小数除的区别是什么？</span></span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">10.2</span>,e = <span class="number">5.2</span>;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">314</span>;i=i/<span class="number">1000</span>*<span class="number">1000</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;double的除法:&quot;</span> + d/e);<span class="comment">//1.9615384615384612</span></span><br><span class="line">        System.out.println(<span class="string">&quot;double/int的除法:&quot;</span> + d/Ari2);<span class="comment">//1.02</span></span><br><span class="line">        System.out.println(<span class="string">&quot;i为:&quot;</span> + i);<span class="comment">//300</span></span><br><span class="line">        <span class="comment">//结论：整数之间做除法时，只保留整数部分而舍弃小数部分，整数与小数相除的结果为小数，小数除的结果为小数。</span></span><br><span class="line">        <span class="comment">//案例题目：• 提示用户输入正整数类型的秒数，拆分秒数后输出x小时x分x秒。• 如：输入xxxx，输出x小时x分x秒。</span></span><br><span class="line">        <span class="comment">//1.提示用户输入正整数类型的秒数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请您输入正整数类型的秒数：&quot;</span>);</span><br><span class="line">        <span class="comment">//2.使用变量记录用户输入的正整数型的秒数</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> Sec1 = sc.nextInt();</span><br><span class="line">        <span class="comment">//3.将正整数的秒数拆分为时分秒后并使用变量记录</span></span><br><span class="line">        <span class="keyword">int</span> Hour = Sec1 / <span class="number">60</span> / <span class="number">60</span>;</span><br><span class="line">        <span class="keyword">int</span> Minute = Sec1 % <span class="number">3600</span> /<span class="number">60</span>;</span><br><span class="line">        <span class="keyword">int</span> Second = Sec1 % <span class="number">60</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;时间为：&quot;</span> + Hour + <span class="string">&quot;小时&quot;</span> + Minute + <span class="string">&quot;分钟&quot;</span> + Second + <span class="string">&quot;秒&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h4 id="三、关系-比较运算符"><a href="#三、关系-比较运算符" class="headerlink" title="三、关系/比较运算符"></a>三、关系/比较运算符</h4><p>• &gt; 表示是否大于运算符 </p><p>&gt;= 表示是否大于等于运算符</p><p>• &lt; 表示是否小于运算符 </p><p>&lt;= 表示是否小于等于运算符</p><p>• == 表示是否等于运算符 </p><p>!= 表示是否不等于运算符</p><p>• 所有以关系运算符作为最终运算的表达式结果一定是boolean类型。</p><p>相关代码：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: YoYopupunsi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: Created in 2:26 2021/2/3 0003</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComparisonOperatorsAndCases</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.声明两个int类型的变量并初始化</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 2.使用变量实现关系运算符的使用并打印结果</span></span><br><span class="line">        <span class="keyword">boolean</span> k = i &gt; j;</span><br><span class="line">        System.out.println(<span class="string">&quot;k = &quot;</span> + k); <span class="comment">// k = true</span></span><br><span class="line">        System.out.println(i &gt; j);   <span class="comment">// 是否大于      true</span></span><br><span class="line">        System.out.println(i &gt;= j);  <span class="comment">// 是否大于或等于 true</span></span><br><span class="line">        System.out.println(i &lt; j);   <span class="comment">// 是否小于    false</span></span><br><span class="line">        System.out.println(i &lt;= j);  <span class="comment">// 是否小于等于 false</span></span><br><span class="line">        System.out.println(i == j);  <span class="comment">// 是否等于    false</span></span><br><span class="line">        System.out.println(i != j);  <span class="comment">// 是否不等于  true</span></span><br><span class="line">        <span class="comment">//1.请用户输入一个整数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请您输入一个整数：&quot;</span>);</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//2.声明一个变量记录用户输入的整数</span></span><br><span class="line">        <span class="keyword">int</span> l = sc.nextInt();</span><br><span class="line">        <span class="comment">//3.声明一个布尔类型的变量判断正负</span></span><br><span class="line">        <span class="keyword">boolean</span> d = l&lt;<span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;d=&quot;</span>+ d);</span><br><span class="line">        System.out.println(l&lt;<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h4 id="四、自增减运算符"><a href="#四、自增减运算符" class="headerlink" title="四、自增减运算符"></a>四、自增减运算符</h4><ul><li><p>++a</p><pre><code>自增（前）：先运算后取值      a=2;b=++a;          a=3;b=3</code></pre></li><li><p>a++</p><pre><code>自增（后）：先取值后运算      a=2;b=a++;          a=3;b=2</code></pre></li><li><p>–a<br>  自减（前）：先运算后取值</p><pre><code>  a=2;b=- -a      a=1;b=1</code></pre></li><li><p>a- -<br>  自减（后）：先取值后运算</p><pre><code>  a=2;b=a- -      a=1;b=2</code></pre><p>自增减运算符只能用于变量，常数不可以使用</p></li><li><p>图片</p></li><li><p><img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213143847.png?raw=true"></p></li><li><p>相关代码</p>  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelfTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 1.声明一个int类型的变量并初始化</span></span><br><span class="line"><span class="keyword">int</span> ia = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 2.打印变量的数值</span></span><br><span class="line">System.out.println(<span class="string">&quot;ia = &quot;</span> + ia); <span class="comment">// ia = 10</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;---------------------------------------------&quot;</span>);</span><br><span class="line"><span class="comment">// 3.实现自增减运算符的使用</span></span><br><span class="line"><span class="comment">// 表示让变量ia自身的数值加1，并覆盖该变量原来的数值   </span></span><br><span class="line">ia++;   <span class="comment">// ia = ia + 1;</span></span><br><span class="line">System.out.println(<span class="string">&quot;ia = &quot;</span> + ia); <span class="comment">// ia = 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示让变量ia自身的数值加1，并覆盖该变量原来的数值  </span></span><br><span class="line">++ia;</span><br><span class="line">System.out.println(<span class="string">&quot;ia = &quot;</span> + ia); <span class="comment">// ia = 12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示让变量ia自身的数值减1，并覆盖该变量原来的数值</span></span><br><span class="line">--ia;</span><br><span class="line">System.out.println(<span class="string">&quot;ia = &quot;</span> + ia); <span class="comment">// ia = 11</span></span><br><span class="line"></span><br><span class="line">ia--;</span><br><span class="line">System.out.println(<span class="string">&quot;ia = &quot;</span> + ia); <span class="comment">// ia = 10</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;---------------------------------------------&quot;</span>);</span><br><span class="line"><span class="comment">// 4.简单的变换</span></span><br><span class="line"><span class="comment">// 其中ia++这个整体叫做表达式   其中ia叫做操作数/变量       也就是ia++和ia表示不同的含义，因此所占的内存空间应该不同</span></span><br><span class="line"><span class="comment">// 下面的代码是在打印表达式的结果</span></span><br><span class="line"><span class="comment">// 后++表示先让变量ia的数值作为整个表达式的最终结果，然后再让ia变量自身的数值加1</span></span><br><span class="line">System.out.println(ia++);         <span class="comment">// 10</span></span><br><span class="line">System.out.println(<span class="string">&quot;ia = &quot;</span> + ia); <span class="comment">// 11</span></span><br><span class="line"><span class="comment">// 前++表示先让变量自身的数值加1，然后再让变量的数值作为整个表达式的结果</span></span><br><span class="line">System.out.println(++ia);         <span class="comment">// 12</span></span><br><span class="line">System.out.println(<span class="string">&quot;ia = &quot;</span> + ia); <span class="comment">// 12</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;---------------------------------------------&quot;</span>);</span><br><span class="line"><span class="comment">// 5.笔试考点</span></span><br><span class="line"><span class="keyword">int</span> ib = ia++;</span><br><span class="line">System.out.println(<span class="string">&quot;ib = &quot;</span> + ib); <span class="comment">// 12</span></span><br><span class="line">System.out.println(<span class="string">&quot;ia = &quot;</span> + ia); <span class="comment">// 13</span></span><br><span class="line"><span class="keyword">int</span> ic = ++ia;</span><br><span class="line">System.out.println(<span class="string">&quot;ic = &quot;</span> + ic); <span class="comment">// 14</span></span><br><span class="line">System.out.println(<span class="string">&quot;ia = &quot;</span> + ia); <span class="comment">// 14</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//                  14  + 16</span></span><br><span class="line">System.out.println(ia++ + ++ia);  <span class="comment">// 30</span></span><br><span class="line">System.out.println(<span class="string">&quot;ia = &quot;</span> + ia); <span class="comment">// 16</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ul><h4 id="五、逻辑运算符"><a href="#五、逻辑运算符" class="headerlink" title="五、逻辑运算符"></a>五、逻辑运算符</h4><p>逻辑运算符的操作数均为boolean表达式</p><h5 id="amp-amp-表示逻辑与运算符"><a href="#amp-amp-表示逻辑与运算符" class="headerlink" title="&amp;&amp; 表示逻辑与运算符"></a>&amp;&amp; 表示逻辑与运算符</h5><p>相当于”并且”，同真为真，一假为假</p><h5 id="表示逻辑或运算符"><a href="#表示逻辑或运算符" class="headerlink" title="|| 表示逻辑或运算符"></a>|| 表示逻辑或运算符</h5><p>相当于”或者”，一真为真，同假为假</p><h5 id="表示逻辑非运算符"><a href="#表示逻辑非运算符" class="headerlink" title="! 表示逻辑非运算符"></a>! 表示逻辑非运算符</h5><p>相当于”取反”，真为假，假为真</p><h5 id="amp-amp-逻辑短路"><a href="#amp-amp-逻辑短路" class="headerlink" title="&amp;&amp;   ||  逻辑短路"></a>&amp;&amp;   ||  逻辑短路</h5><p>​    • 对于逻辑与运算符来说，若第一个表达式为假则结果为假，此时跳过第二个表达式；</p><p>​    • 对于逻辑或运算符来说，若第一个表达式为真则结果为真，此时跳过第二个表达式；</p><p>​    作用： </p><p>1、由于&amp;&amp;和||的表达式存在短路运算现象，在短路之后不会对后面的表达式进行运算，所以含有&amp;&amp;和||的表达式最好不要进行变量的赋值和运算操作，可以先计算好每个表达式的结果，直接拿结果进行&amp;&amp;和||的运算<br>2、在代码编写的时候就要注意这一点，以防由于&amp;&amp;和||的短路运算导致写出来的代码运算结果与预期的不同<br>3、把能快速确定整个表达式结果true或false的表达式放在前面，这样由于短路运算后面的表达式可能不会被运算到，节省处理器的运算时间</p><p>相关代码：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: YoYopupunsi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: Created in 13:17 2021/2/3 0003</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogicalOperators</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.声明两个boolean类型的变量并初始化</span></span><br><span class="line">        <span class="keyword">boolean</span> b1 = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> b2 = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 2.打印变量的数值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;b1 = &quot;</span> + b1); <span class="comment">// b1 = true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;b2 = &quot;</span> + b2); <span class="comment">// b2 = false</span></span><br><span class="line">        <span class="comment">// 3.使用上述变量实现逻辑运算符的使用</span></span><br><span class="line">        <span class="keyword">boolean</span> b3 = b1 &amp;&amp; b2;</span><br><span class="line">        System.out.println(<span class="string">&quot;b3 = &quot;</span> + b3); <span class="comment">// false</span></span><br><span class="line">        System.out.println(b1 &amp;&amp; b2); <span class="comment">// false   并且</span></span><br><span class="line">        System.out.println(b1 || b2); <span class="comment">// true    或者</span></span><br><span class="line">        System.out.println(!b1);  <span class="comment">// false       取反</span></span><br><span class="line">        System.out.println(!b2);  <span class="comment">// true</span></span><br><span class="line">        <span class="comment">// 4.测试一下短路特性</span></span><br><span class="line">        <span class="keyword">int</span> ia = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> ib = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">// 对于逻辑与运算符来说，若第一个条件为假则整个表达式为假，此时跳过第二个表达式不执行</span></span><br><span class="line">        <span class="keyword">boolean</span> b4 = (++ia == <span class="number">3</span>) &amp;&amp; (++ib == <span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;b4 = &quot;</span> + b4); <span class="comment">// false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ia = &quot;</span> + ia); <span class="comment">// 4</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ib = &quot;</span> + ib); <span class="comment">// 5</span></span><br><span class="line">        <span class="comment">// 对于逻辑或运算符来说，若第一个条件为真则整个表达式为真，此时跳过第二个表达式不执行</span></span><br><span class="line">        <span class="keyword">boolean</span> b5 = (++ia == <span class="number">5</span>) || (++ib == <span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;b5 = &quot;</span> + b5); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ia = &quot;</span> + ia); <span class="comment">// 5</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ib = &quot;</span> + ib); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.提示用户输入一个正整数并使用变量记录</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个正整数：&quot;</span>);</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> num = sc.nextInt();</span><br><span class="line">        <span class="comment">// 2.使用逻辑运算符判断是否为三位数并打印    &gt;= 100   &lt;= 999   &amp;&amp;</span></span><br><span class="line">        <span class="comment">//System.out.println(100 &lt;= num &lt;= 999); // 错误: 二元运算符 &#x27;&lt;=&#x27; 的操作数类型错误</span></span><br><span class="line">        <span class="comment">// 逻辑运算符主要用于连接多个关系运算符作为最终运算的表达式，用于实现多条件的连接</span></span><br><span class="line">        System.out.println(<span class="number">100</span> &lt;= num &amp;&amp; num &lt;= <span class="number">999</span>);</span><br><span class="line">        <span class="comment">// 使用三目运算符来判断是否为三位数</span></span><br><span class="line">        System.out.println(num + ((<span class="number">100</span> &lt;= num &amp;&amp; num &lt;= <span class="number">999</span>)? <span class="string">&quot;是三位数&quot;</span>: <span class="string">&quot;不是三位数&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h4 id="六、条件-三目运算符"><a href="#六、条件-三目运算符" class="headerlink" title="六、条件/三目运算符"></a>六、条件/三目运算符</h4><p>条件表达式? 表达式1: 表达式2<br>格式：a&gt;b ? a:b；<br>判断条件表达式是否成立，若成立则执行表达式1，否则执行表达式2 </p><p>相关代码：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TernaryOperator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.提示用户分別输入两个整数并使用变量记录</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第一个整数：&quot;</span>);</span><br><span class="line">        Scanner sc1 = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> i = sc1.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第二个整数：&quot;</span>);</span><br><span class="line">        Scanner sc2 = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> j = sc2.nextInt();</span><br><span class="line">        <span class="comment">// 2.使用三目运算符找到最大值并打印</span></span><br><span class="line">        <span class="keyword">int</span> maxiMum = i &gt; j ? i : j;</span><br><span class="line">        System.out.println(<span class="string">&quot;最大值是：&quot;</span> + maxiMum);</span><br><span class="line">        System.out.println(<span class="string">&quot;最大值是：&quot;</span> + (i &gt; j? i : j));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="七、赋值运算符"><a href="#七、赋值运算符" class="headerlink" title="七、赋值运算符"></a>七、赋值运算符</h4><p>符号：=<br>1.当“=”两侧数据类型不一致时，可以使用自动类型转换或使用强制类型转换原则进行处理<br>2.支持连续赋值<br>赋值表达式本身也有值，其本身之值即为所赋之值</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: YoYopupunsi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: Created in 15:26 2021/2/3 0003</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AssignmentOperators</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.声明一个int类型的变量并初始化</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">3</span>;</span><br><span class="line">        <span class="comment">// 2.打印变量的数值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;i = &quot;</span> + i); <span class="comment">// i = 3</span></span><br><span class="line">        <span class="comment">// 3.简单赋值运算符的使用</span></span><br><span class="line">        <span class="comment">// 表示将数据5赋值给变量ia并且覆盖变量ia原来的数值</span></span><br><span class="line">        i = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">// 下面的代码是在打印表达式的结果</span></span><br><span class="line">        System.out.println( i = <span class="number">5</span> ); <span class="comment">// 5</span></span><br><span class="line">        System.out.println(<span class="string">&quot;i = &quot;</span> + i); <span class="comment">// i = 5</span></span><br><span class="line">        <span class="keyword">int</span> j = i = <span class="number">6</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;i = &quot;</span> + i); <span class="comment">// i = 6</span></span><br><span class="line">        System.out.println(<span class="string">&quot;j = &quot;</span> + j); <span class="comment">// j = 6</span></span><br><span class="line">        <span class="keyword">int</span> k;</span><br><span class="line">        k = j = i = <span class="number">8</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;i = &quot;</span> + i); <span class="comment">// i = 8</span></span><br><span class="line">        System.out.println(<span class="string">&quot;j = &quot;</span> + j); <span class="comment">// j = 8</span></span><br><span class="line">        System.out.println(<span class="string">&quot;k = &quot;</span> + k); <span class="comment">// k = 8</span></span><br><span class="line">        <span class="comment">// 4.复合赋值运算符的使用</span></span><br><span class="line">        <span class="comment">//i = i + 2;  目前推荐使用该方式</span></span><br><span class="line">        i += <span class="number">2</span>;        <span class="comment">// 简化写法，从结果上来看是等价的</span></span><br><span class="line">        System.out.println(<span class="string">&quot;i = &quot;</span> + i); <span class="comment">// i = 10</span></span><br><span class="line">        <span class="comment">// 5.笔试考点1</span></span><br><span class="line">        <span class="keyword">byte</span> l = <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;l = &quot;</span> + l); <span class="comment">// l = 10</span></span><br><span class="line">        <span class="comment">//l = l + 2; // 错误: 不兼容的类型: 从int转换到byte可能会有损失         byte + int 相加结果还是int类型</span></span><br><span class="line">        <span class="comment">//l = l + (byte)2; // 错误: 不兼容的类型: 从int转换到byte可能会有损失   byte + byte 相加结果还是int类型  编译器优化</span></span><br><span class="line">        <span class="comment">//l = (byte)(l + 2); // 强制类型转换，将int类型转换为byte</span></span><br><span class="line">        l += <span class="number">2</span>; <span class="comment">// 真正等价于l = (byte)(l + 2);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;l = &quot;</span> + l); <span class="comment">// l = 12</span></span><br><span class="line">        l -= <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;l-=2= &quot;</span> + l);<span class="comment">//l=10</span></span><br><span class="line">        l *= <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;l*=2= &quot;</span> + l);<span class="comment">//20</span></span><br><span class="line">        l /= <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;l/=2= &quot;</span> + l);<span class="comment">//10</span></span><br><span class="line">        l %= <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;l%=2= &quot;</span> + l);<span class="comment">//0</span></span><br><span class="line">        <span class="comment">// 6.笔试考点2</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">boolean</span> b = a == <span class="number">1</span>; <span class="comment">//a==1; 表示判断变量b的数值是否等于1</span></span><br><span class="line">        System.out.println(b);<span class="comment">//ture</span></span><br><span class="line">        System.out.println(a == <span class="number">1</span>);<span class="comment">//ture</span></span><br><span class="line">        <span class="keyword">boolean</span> b1 = <span class="number">1</span> == a;<span class="comment">//1 == a; 表示判断1是否等于变量a的数值，从结果上来说等价，推荐该方式</span></span><br><span class="line">        System.out.println(b1);<span class="comment">//ture</span></span><br><span class="line">        System.out.println(<span class="number">1</span> == a);<span class="comment">//ture</span></span><br><span class="line">        System.out.println(a = <span class="number">1</span>);<span class="comment">//a = 1;   表示将1赋值给变量a，覆盖变量a原来的数值</span></span><br><span class="line">       <span class="comment">//System.out.println(1 = a);//1 = a;  //- 编译报错  错误: 意外的类型  需要: 变量  找到:    值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="八、移位运算符"><a href="#八、移位运算符" class="headerlink" title="八、移位运算符"></a>八、移位运算符</h4><p><img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213143222.jpg?raw=true" alt="移位运算符"></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MoveBitTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.声明一个byte类型的变量并初始化</span></span><br><span class="line"><span class="keyword">byte</span> b1 = <span class="number">13</span>;</span><br><span class="line"><span class="comment">// 2.打印变量的数值</span></span><br><span class="line">System.out.println(<span class="string">&quot;b1 = &quot;</span> + b1); <span class="comment">// b1 = 13</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;---------------------------------------------------&quot;</span>);</span><br><span class="line"><span class="comment">// 3.移位运算符的使用</span></span><br><span class="line"><span class="comment">// 13的二进制是：... 0000 1101  =&gt; 左移1位的结果是：... 0001 1010 =&gt; 换算为十进制整数是：26</span></span><br><span class="line"><span class="comment">//byte b2 = b1 &lt;&lt; 1; // 错误: 不兼容的类型: 从int转换到byte可能会有损失   自动提升为int类型，也就是32位二进制</span></span><br><span class="line"><span class="keyword">byte</span> b2 = (<span class="keyword">byte</span>)(b1 &lt;&lt; <span class="number">1</span>); </span><br><span class="line">System.out.println(<span class="string">&quot;b2 = &quot;</span> + b2); <span class="comment">// 26</span></span><br><span class="line">System.out.println(b1 &lt;&lt; <span class="number">1</span>); <span class="comment">// 26    左移1位相当于当前整数的数值*2</span></span><br><span class="line">System.out.println(b1 &lt;&lt; <span class="number">2</span>); <span class="comment">// 52    左移2位相当于当前整数的数值*4</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;---------------------------------------------------&quot;</span>);</span><br><span class="line"><span class="comment">// 13的二进制是：... 0000 1101 =&gt; 右移1位的结果是：... 0000 0110 =&gt; 换算为十进制整数是：6</span></span><br><span class="line">System.out.println(b1 &gt;&gt; <span class="number">1</span>); <span class="comment">// 6     右移1位相当于当前整数的数值/2</span></span><br><span class="line">System.out.println(b1 &gt;&gt; <span class="number">2</span>); <span class="comment">// 3     右移2位相当于当前整数的数值/4</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;---------------------------------------------------&quot;</span>);</span><br><span class="line"><span class="comment">// 逻辑右移   对于非负数来说，逻辑右移和右移的效果一致</span></span><br><span class="line">System.out.println(b1 &gt;&gt;&gt; <span class="number">2</span>); <span class="comment">// 3  </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213143848.png?raw=true"></p><p><img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213143849.png?raw=true"></p><h4 id="九、位运算符"><a href="#九、位运算符" class="headerlink" title="九、位运算符"></a>九、位运算符</h4><ul><li>&amp; 表示按位与运算符，按照二进制位进行与运算，同1为1，一0为0.</li><li>| 表示按位或运算符，按照二进制位进行或运算，一1为1，同0为0.</li><li>~ 表示按位取反运算符，按照二进制位进行取反，1为0，0为1.</li><li>^ 表示按位异或运算符，按照二进制位进行异或运算，同为0，不同为1.</li><li>相关代码：</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.声明两个byte类型的变量并初始化</span></span><br><span class="line"><span class="keyword">byte</span> b1 = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">byte</span> b2 = <span class="number">13</span>;</span><br><span class="line"><span class="comment">// 2.打印变量的数值</span></span><br><span class="line">System.out.println(<span class="string">&quot;b1 = &quot;</span> + b1); <span class="comment">// b1 = 11</span></span><br><span class="line">System.out.println(<span class="string">&quot;b2 = &quot;</span> + b2); <span class="comment">// b2 = 13</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;---------------------------------------------------&quot;</span>);</span><br><span class="line"><span class="comment">// 3.实现位运算符的使用</span></span><br><span class="line"><span class="comment">// b1的二进制为： 0000 1011          </span></span><br><span class="line"><span class="comment">// b2的二进制为： 0000 1101</span></span><br><span class="line">System.out.println( b1 &amp; b2);  <span class="comment">// 按位与：同1为1，一0为0      按位与后的二进制为：0000 1001  =&gt; 转为十进制是：9</span></span><br><span class="line">System.out.println( b1 | b2);  <span class="comment">// 按位或：一1为1，同0为0      按位或后的二进制为：0000 1111  =&gt; 转为十进制是：15</span></span><br><span class="line">System.out.println( b1 ^ b2);  <span class="comment">// 按位异或：相同为0，不同为1  按位异或的二进制为：0000 0110  =&gt; 转为十进制是：6</span></span><br><span class="line">System.out.println( ~ b1);     <span class="comment">// 按位取反：1为0,0为1         按位取反的二进制为：1111 0100 </span></span><br><span class="line"><span class="comment">// 二进制1111 0100转为十进制 =&gt; 先减1: 1111 0011 =&gt; 按位取反：0000 1100 =&gt; 转为十进制：12  =&gt; 添加负号：-12</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213143845.png?raw=true"></p><h4 id="十、运算符的优先级"><a href="#十、运算符的优先级" class="headerlink" title="十、运算符的优先级"></a>十、运算符的优先级</h4><ul><li>()的优先级极高 </li><li>=的优先级极低</li><li>若无法确认优先级，则使用()来确保即可</li></ul><p><img src="https://github.com/YoYopupunsi/PicGoImgbed/blob/main/posts/20210213143846.png?raw=true"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言概述 </tag>
            
            <tag> 变量 </tag>
            
            <tag> 数据类型 </tag>
            
            <tag> 运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建</title>
      <link href="posts/e3e08109.html"/>
      <url>posts/e3e08109.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
